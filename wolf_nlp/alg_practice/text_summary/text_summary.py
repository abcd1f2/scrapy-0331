#coding=utf8

"""
自动文摘主要算法:
1、基于统计：统计词频、位置等信息，计算句子权重
2、基于图模型：构建拓扑结构图，对句子排序，如TextRank/LexRank
3、基于潜在语义：使用主题模型，挖掘语句隐藏信息，如LDA/HMM等
4、基于整数规划：将文摘问题转化为整数线性规划，求全局最优解

自动摘要算法：
    1、tf-idf，最常见也是最容易实现的算法，但是效果一般
    2、TextRank算法效果好于tf-idf
        针对文本里的句子设计权重算法，利用投票原理，让每一个句子给它的邻居投票，票的权重取决于自己的票数

TextRank算法应用：
    1、文本生成关键词
    2、文本自动摘要

TextRank算法来提取文章的摘要，TextRank类似于PageRank算法，借助于PageRank的算法思想
两个算法区别：
    PageRank的边是没有权值的，TextRank的边是有权值的，TextRank边表示两个句子的相似性，
    边的权值计算：
        (1)Jaccard similarity coefficient就是交集数目除以并集数目
        (2)cosine的余弦夹角
        (3)bm25一类的算法(snowNLP使用的算法)

1、提取关键词：
    流程：
        (1)、分词，选取其中的名词、动词、形容词、副词
        (2)、每个词作为一个节点，设定窗口大小n，每个单词将票投给它身前身后距离5以内的单词
        (3)、迭代计算，阻尼系数一般设置为0.85，直到图中任意一点的误差率小于给定的极限值就可以达到收敛，一般极限值为0.0001

2、提取摘要
    流程：
        (1)：预处理，将文本分割成句子，构建图，将句子分词，得到每个句子的分词
        (2)：句子相识度计算，算法有：编辑距离、基于语义词典、余弦相似度、BM25等
        (3)：迭代计算句子权重得分，进行排序，抽取最高权重的前N的句子

"""

def main():
    pass

if __name__ == '__main__':
    main()
