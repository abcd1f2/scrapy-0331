#coding=utf8

"""
    CYK（Cocke-Younger-Kasami）算法：
        概述：
            CYK算法是一个用来判定任意给定的字符串是否属于一个上下文无关文法的算法。！！！！！！！
            算法在O(n^3)时间内构造出一个表明字串w是否属于乔姆斯基范式(CNF)L的表
            对于一个任意给定的上下文无关文法，都可以使用CYK算法来计算上述问题
            在计算机领域，CYK算法是一种用来对上下文无关文法（CFG）进行语法解析的算法。
            CYK算法是一种基于动态规划思想设计的一种自底向上语法分析算法，普通的回溯法在最坏情况下需要指数时间才能解决问题，但是CYK仅仅只需要多项式时间就够了。

            基于CNF的字符串识别算法
            G中产生式都形如：
                A->BC
                A->a
            其中，ABC是非终结符，a是终结符

        应用：
            CFG和Parsing在编译技术和自然语言处理中都有用到

        1、CNF（乔姆斯基范式）
            两种语法等价，弱等价和强等价两种
        2、CYK算法
            a、CYK处理的CFG必须是CNF形式的。所以算法首先要把非CNF形式的CFG转换为CNF形式。
            b、填写一个parse table。（CYK是一种自底向上的算法，意思是从单词开始，朝向句子工作）

        给一个有n个字符的字符串s，和R条语法规则，计算复杂度为O(R*n^3)，空间复杂度为O(R*n^2)类似于optimal binary search tree的算法
        算法过程：
            1、对于输入串，a1a2a3...an，建立一个n*n的表T，T[i,j]表示可以推导出ai...aj的非终结符号集合
            2、建表时，从j-i最小的开始建，直到T[1,n]。（动态规划）
            3、建表规则：X∈Tij，当且仅当Y∈Tik且Z∈Tki（其中X->YZ[CNF]）
            4、最终若T[1,n]中包含开始符号S，则可以识别串a1a2...an，算法时间为O(n^3)

            算法中，只要记录k的值，就可以构建一颗上下文无关语言的推导树

        例子：
            2016年的NCPC的题目，有如下规则：
            A => AAAAAAA 20     //一个合法字串A可以是7个合法字串A所组成，后面的数字是权重
            A => AA 15      //一个合法字串A可以是2个合法字串A所组成
            A => a 5        //一个合法字串A可以是1个合法字串a所组成
            现在有一个目标字串，要找出把整个目标字串转换成A的最小花费，例如给定aaaaaaaa，则最小花费为75
            aaaaaaaa --> AAAAAAAA（需要40花费） --> AA（需要20花费）--> A（需要15花费）   

    语法分析算法：
        通用语法分析算法，如CYK、Earley可以用于分析任何文法，但是效率低下，不能用于编译器产品



"""


def main():
    print("test")













if __name__ == '__main__':
    main()
